// subclases

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="clases.Coche" table="coches">
        <id name="codigo"/>
        <property name="marca"/>
        <property name="modelo"/>
        <many-to-one name="empresa" class="clases.Empresa">
            <column name="cif" not-null="true"/>
        </many-to-one>
  
        <joined-subclass name="clases.CochesVenta" table="cochesventa">
            <key column="codigo"/>
            <property name="precio"/>
        </joined-subclass>
  
        <joined-subclass name="clases.CochesAlquiler" table="cochesalquiler">
            <key column="codigo"/>
            <property name="preciodia"/>
            <property name="estado"/> 
            <set name="usos" table="usos" inverse="true">
                <key>
                    <column name="codcoche" not-null="true"/>
                </key>
                <one-to-many class="clases.Usos"/>
            </set>
        </joined-subclass>
    </class>
</hibernate-mapping>


// id compuesto

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="clases.Usos" table="usos">
        <composite-id>
            <key-property name="fechaalq" type="date"/>
            <key-many-to-one name="coche">
                <column name ="codcoche" not-null="true"/>
            </key-many-to-one>
        </composite-id>
        <property name ="fechaent" type="date"/>
        <property name="importe"/>
    </class>
</hibernate-mapping>


//one-to-one

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
  <class name="clases.Telefono" table="telefonos">
      <id name="dni" column="dni"/>
      <property name="telf" column="telefono"/>
      <one-to-one name="autor" class="clases.Autor" cascade="save-update" constrained="true"/>
  </class>
</hibernate-mapping>

//many-to-many

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
  <class catalog="institutos_ciclos" name="clases.Institutos" table="institutos">
    <id name="codinst">
      <generator class="identity"/>
    </id>
    <property name="tf" type="string">
      <column name="tf" not-null="true"/>
    </property>
    <set inverse="true" name="ciclos" table="ciclos_institutos">
      <key>
        <column name="codinst" not-null="true"/>
      </key>
      <many-to-many entity-name="clases.Ciclos">
        <column name="codciclo" not-null="true"/>
      </many-to-many>
    </set>
  </class>
</hibernate-mapping>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
  <class catalog="institutos_ciclos" name="clases.Ciclos" table="ciclos">
    <id name="codciclo">
      <generator class="identity"/>
    </id>
    <property name="nombre" type="string">
      <column name="nombre" not-null="true" unique="true"/>
    </property>
    <set inverse="true" name="usos" table="usos">
      <key>
        <column name="codciclo" not-null="true"/>
      </key>
      <one-to-many class="clases.Usos"/>
    </set>
    <set inverse="false" name="institutos" table="ciclos_institutos">
      <key>
        <column name="codciclo" not-null="true"/>
      </key>
      <many-to-many entity-name="clases.Institutos">
        <column name="codinst" not-null="true"/>
      </many-to-many>
    </set>
  </class>
</hibernate-mapping>

//metodos

    public static void guardarModificar(Object objeto) {
        Session sesion;
        try {
            sesion = NewHibernateUtil.getSession();
            sesion.beginTransaction();
            sesion.saveOrUpdate(objeto);
            sesion.getTransaction().commit();
            sesion.close();
        } catch (HibernateException e) {
            System.out.println(e.getMessage());
        }
    }

    public static void eliminar(Object objeto) {
        Session sesion;
        try {
            sesion = NewHibernateUtil.getSession();
            sesion.beginTransaction();
            sesion.delete(objeto);
            sesion.getTransaction().commit();
            sesion.close();
        } catch (HibernateException e) {
            System.out.println(e.getMessage());
        }
    }

    public static int visualizarEmp(Modo m) {
        Session s;
        List<Object> empresas = null;
        try {
            s = NewHibernateUtil.getSession();
            empresas = s.createCriteria(Empresa.class).list();
            if (empresas.isEmpty()) {
                return 0;
            } else {
                if (m == Modo.MOSTRAR) {
                    Utilidades.cabeceraEmp();
                    for (Object o : empresas) {
                        System.out.println("\u2502" + String.format("%1$-24s %2$-25s %3$s", ((Empresa) o).getCif(),
                                ((Empresa) o).getNombre(), ((Empresa) o).getTelf()) + "\u2502");
                    }
                    s.close();
                    Utilidades.finGen();
                }
                return 1;
            }
        } catch (HibernateException e) {
            System.out.println(e);
        }
        return 1;
    }

//util

public class NewHibernateUtil {

    private static final SessionFactory sessionFactory;
    
    static {
        try {
            // Create the SessionFactory from standard (hibernate.cfg.xml) 
            // config file.
            sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();
        } catch (Throwable ex) {
            // Log the exception. 
            System.err.println("Initial SessionFactory creation failed." + ex);
            throw new ExceptionInInitializerError(ex);
        }
    }
    
    public static SessionFactory getSessionFactory() {
        return sessionFactory;
    }
    
    public static Session getSession(){
        return sessionFactory.openSession();
    }
}
